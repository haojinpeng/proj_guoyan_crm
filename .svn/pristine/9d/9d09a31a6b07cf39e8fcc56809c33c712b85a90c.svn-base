package com.it.controller;

import com.it.bean.*;
import com.it.services.EmployeeContrService;
import com.it.services.impl.EmployeeContrServiceImpl;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

@WebServlet(name = "EmployeeConServlet",urlPatterns = {"/employeeCon.do"})
public class EmployeeConServlet extends HttpServlet {
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setCharacterEncoding("utf-8");
        response.setContentType("application/json;utf-8");
        PrintWriter out = response.getWriter();

        String opt = request.getParameter("opt");

        String id = request.getParameter("id");
        System.out.println("id>>>>"+id);

        String project_name=request.getParameter("project_name");
        System.out.println("project_name>>>>>"+project_name);

        String station_name=request.getParameter("station_name");
        System.out.println("station_name>>>>>"+station_name);

        String employee_number=request.getParameter("employee_number");
        System.out.println("employee_number>>>>>"+employee_number);

        String createtime=request.getParameter("createtime");
        System.out.println("createtime>>>>>"+createtime);

        String number=request.getParameter("number");
        System.out.println("number>>>>>"+number);

        String workorder_id=request.getParameter("workorder_id");
        System.out.println("workorder_id>>>>>"+workorder_id);

        String cycle=request.getParameter("cycle");
        System.out.println("cycle>>>>>"+cycle);

        String actual_working_hours=request.getParameter("actual_working_hours");
        System.out.println("actual_working_hours>>>>>"+actual_working_hours);


        String beginTime = request.getParameter("beginTime");
        System.out.println("beginTime>>>>"+beginTime);

        String endTime = request.getParameter("endTime");
        System.out.println("endTime>>>>"+endTime);
        String user_id = request.getParameter("user_id");
        System.out.println("user_id>>>>"+user_id);
        String project_id = request.getParameter("project_id");
        System.out.println("project_id>>>>"+project_id);
        String station_id = request.getParameter("station_id");
        System.out.println("station_id>>>>"+station_id);
        String workoders_id = request.getParameter("workoders_id");
        System.out.println("workoders_id>>>>"+workoders_id);
        String projApply_id = request.getParameter("projApply_id");
        System.out.println("projApply_id>>>>"+projApply_id);
        String projImpl_id = request.getParameter("projImpl_id");
        System.out.println("projImpl_id>>>>"+projImpl_id);
        String projWork_id = request.getParameter("projWork_id");
        System.out.println("projWork_id>>>>"+projWork_id);
        String workProcess_id = request.getParameter("workProcess_id");
        System.out.println("workProcess_id>>>>"+workProcess_id);

        EmployeeContribution ec = new EmployeeContribution();

        if (id!=null && !"".equals(id)){
            ec.setId(Integer.valueOf(id));
        }
        if (!"".equals(project_name)  && project_name!=null){
            ec.setProject_name(project_name);
        }
        if (!"".equals(station_name)  && station_name!=null){
            ec.setStation_name(station_name);
        }
        if (!"".equals(employee_number) && employee_number!=null){
            ec.setEmployee_number(employee_number);
        }
        if (!"".equals(workorder_id)  && workorder_id!=null){
            ec.setWorkorder_id(Integer.valueOf(workorder_id));
        }
        if (!"".equals(number)  && number!=null){
            ec.setNumber(number);
        }
        if (!"".equals(cycle)  && cycle!=null){
            ec.setCycle(Integer.valueOf(cycle));
        }
        if (!"".equals(actual_working_hours)  && actual_working_hours!=null){
            ec.setActual_working_hours(Integer.valueOf(actual_working_hours));
        }
        if (!"".equals(createtime)  && createtime!=null){
            ec.setCreatetime(createtime);
        }

        if (user_id!=null && !"".equals(user_id)){
            ec.setUser_id(Integer.valueOf(user_id));
        }
        if (project_id!=null && !"".equals(project_id)){
            ec.setProject_id(Integer.valueOf(project_id));
        }
        if (station_id!=null && !"".equals(station_id)){
            ec.setStation_id(Integer.valueOf(station_id));
        }
        if (workoders_id!=null && !"".equals(workoders_id)){
            ec.setWorkoders_id(Integer.valueOf(workoders_id));
        }
        if (projApply_id!=null && !"".equals(projApply_id)){
            ec.setProjApply_id(Integer.valueOf(projApply_id));
        }
        if (projImpl_id!=null && !"".equals(projImpl_id)){
            ec.setProjImpl_id(Integer.valueOf(projImpl_id));
        }
        if (projWork_id!=null && !"".equals(projWork_id)){
            ec.setProjWork_id(Integer.valueOf(projWork_id));
        }
        if (workProcess_id!=null && !"".equals(workProcess_id)){
            ec.setWorkProcess_id(Integer.valueOf(workProcess_id));
        }
        EmployeeContrService service = new EmployeeContrServiceImpl();
        String flags = "1";
        //添加功能
        if ("add".equals(opt)){
            System.out.println("-------add");
            boolean flag = service.add(ec);
            if (!flag){
                flags = "0";
            }
            System.out.println("add----"+flags);
            out.print(flags);
        }
        //删除
        if ("delete".equals(opt)){

            boolean flag = service.delete(ec);
            if (!flag){
                flags = "0";
            }
            System.out.println("delete-----"+flags);
            out.print(flags);
        }
        //批量删除
        if("delBatch".equals(opt)){
            String ids = request.getParameter("delArray");
            String [] idt = ids.split(",");
            for (int i = 0; i < idt.length; i++) {
                if(id != null & !"".equals(id)){
                    try{
                        ec.setId(Integer.parseInt(idt[i]));
                        service.delete(ec);
                    }catch (Exception e){
                        e.printStackTrace();
                        flags = "0";
                    }
                }
            }
            System.out.println("删除"+flags);
            out.print(flags);
        }
        //修改
        if ("update".equals(opt)){
            System.out.println("-------upd");
            boolean flag = service.update(ec);
            if (!flag){
                flags = "0";
            }
            System.out.println("update----"+flags);
            out.print(flags);
        }
        //查询所有
        if ("queryAll".equals(opt)) {
            String page = request.getParameter("page");
            String rows = request.getParameter("limit");
            System.out.println("这里");
            System.out.println("page-->" + page);
            System.out.println("rows-->" + rows);
            PageBean pageBean = null;
            if(page != null && !"".equals(page)){
                if(rows != null && !"".equals(rows)){
                    pageBean  = new PageBean(Integer.parseInt(page), Integer.parseInt(rows));
                }
            }
            List<EmployeeContribution> list =null;
            System.out.println(beginTime);
            System.out.println(endTime);
            int total =service.queryAll(ec,beginTime,endTime).size();
            System.out.println("total-->" + total);
            list = service.queryAll(ec,beginTime,endTime,pageBean);
            JSONArray jsonArray = JSONArray.fromObject(list);
            JSONObject result = new JSONObject();
            result.put("code", 0);
            result.put("msg", "正在加载....");
            result.put("count", total);
            result.put("data", jsonArray);
            System.out.println(result.toString());
            out.print(result);
        }
        //按项目名称查找
        if ("selectProjName".equals(opt)){
            System.out.println("============");
            Project project = new Project();
            List<Project> projectList = service.selectProjName(project);
            System.out.println("projectList---"+projectList);
            JSONArray jsonArray = JSONArray.fromObject(projectList);
            System.out.println(jsonArray.toString());
            out.print(jsonArray);
        }
        //按岗位名称查找
        if ("selectStatName".equals(opt)) {
            System.out.println("============");
            Station station = new Station();
            List<Station> stationList = service.selectStatName(station);
            System.out.println("stationList---"+stationList);
            JSONArray jsonArray = JSONArray.fromObject(stationList);
            System.out.println(jsonArray.toString());
            out.print(jsonArray);
        }
        //按员工号查询
        if ("selectEmploNum".equals(opt)){
            System.out.println("=========");
            User user = new User();
            List<User> userList = service.selectEmploNum(user);
            System.out.println("userList---"+userList);
            JSONArray jsonArray = JSONArray.fromObject(userList);
            System.out.println(jsonArray.toString());
            out.print(jsonArray);
        }
    }
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request,response);
    }
}
